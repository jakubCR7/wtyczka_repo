# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'zaliczka_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
import numpy as np
from qgis.PyQt import uic
from qgis.utils import iface
from qgis.PyQt import QtWidgets
from qgis.core import QgsWkbTypes
from qgis.core import QgsMessageLog, Qgis
from qgis.core import QgsProject, QgsPointXY

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'zaliczka_dialog_base.ui'))

class wtyczka_projektDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(wtyczka_projektDialog, self).__init__(parent)
        self.setupUi(self)

        self.pbroznicaH.clicked.connect(self.roznicaH)


        self.pbpole.clicked.connect(self.pole)

    def roznicaH(self):
        
        obiekt = self.layer.currentLayer()
        if obiekt is None:
            iface.messageBar().pushMessage("Różnica wysokosci", 'Nie wybrano aktywnej warstwy', level = Qgis.Warning)
            return
        
        obiekt2 = self.layer.currentLayer().selectedFeatures()
        if len(obiekt2) != 2:
            iface.messageBar().pushMessage("Różnica wysokosci", 'W celu obliczenia różnicy wysokosci wybierz 2 punkty.', level = Qgis.Warning)
            return
        
        if len(obiekt2) == 2:
            
            H1 = float(obiekt2[0]['h_plevrf2007nh'])
            H2 = float(obiekt2[1]['h_plevrf2007nh'])
            
            przewyzszenie = round(H2 - H1, 3)
            
            self.label_wys.setText(str(przewyzszenie) +'m')
            
            
        QgsMessageLog.logMessage('Różnica wysokości między punktami wynosi:' +str(przewyzszenie) +'m', level = Qgis.Success)
        
        iface.messageBar().pushMessage("Różnica wysokosci", 'Różnica wysokosci między punktami policzona.', level = Qgis.Success)
        
    def pole(self):
    
        obiekty = self.layer.currentLayer().selectedFeatures()
        punkty = []
        for o in obiekty:
            x = float(o.geometry().asPoint().x())
            y = float(o.geometry().asPoint().y())
            p = QgsPointXY(x, y)
            punkty.append(p)
            
        if len(obiekty)<3:
            iface.messageBar().pushMessage("Pole powierzchni", 'W celu policzenia pola wybierz conajmniej 3 punkty.', level = Qgis.Warning)
            return
            
        if len(obiekty)>2:

            pole = 0
            dl = len(punkty)
            for e in range(dl):
                a = (e + 1) % dl
                pole += (punkty[a].x() + punkty[e].x()) * (punkty[a].y() - punkty[e].y())

            pole /= 2
            pole = round(abs(pole/10000), 3)
            
            pole = self.label_pole.setText(str(pole) +'ha')

            QgsMessageLog.logMessage('Pole powierzchni między punktami to: {pole} ha', level = Qgis.Success)
        
            iface.messageBar().pushMessage("Pole powierzchni", 'Pole powierzchnivpoliczone', level = Qgis.Success)
            